@page "/"
@using Isitar.TimeTracking.Frontend.Common.Authentication
@using Isitar.TimeTracking.Application.TimeTrackingEntry.Queries.TimeTrackingEntryDetail
@using Isitar.TimeTracking.Application.Project.Queries.ProjectList
@using Isitar.TimeTracking.Frontend.Services
@attribute [Authorize]
<div class="page-index">
    <section class="section">
        <div class="container">
            <h1 class="title">Welcome Username</h1>
            <div class="columns">
                <div class="column">
                    @if (null != TimeTrackingEntryDetail)
                    {
                        <TimeTrackingEntryCard TimeTrackingEntryDetail="@TimeTrackingEntryDetail" StoppedWorking="@(e => LoadCurrentTimeTrackingEntry())"/>
                    }
                    else
                    {
                        <p>Currently not working</p>
                    }
                </div>
            </div>
        </div>
    </section>
    <section class="section">
        <div class="container">
            <h2 class="title">Your Projects</h2>
            <ul class="columns is-multiline">
                @foreach (var userProject in UserProjects)
                {
                    <li class="column is-one-third-desktop is-half-tablet">
                        <ProjectCard Project="@userProject" WorkingOnChanged="@(e => LoadCurrentTimeTrackingEntry())"/>
                    </li>
                }
            </ul>
        </div>
    </section>
    <section class="section">
        <div class="container">
            <h2 class="title">Your day</h2>
            <TimeTrackingEntryReport UserId="UserId"/>
        </div>
    </section>
</div>

@code
{
    public TimeTrackingEntryDetailVm TimeTrackingEntryDetail { get; private set; }

    public IEnumerable<ProjectSlimDto> UserProjects { get; set; } = new ProjectSlimDto[0];

    public Guid UserId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserId = await AuthenticationStateProvider.UserIdAsync();
            await LoadUserProjectsAsync();
            await LoadCurrentTimeTrackingEntry();
        }
    }

    [Inject]
    public IProjectService ProjectService { get; set; }

    [Inject]
    public ITimeTrackingService TimeTrackingService { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private async Task LoadUserProjectsAsync()
    {
        UserProjects = (await ProjectService.ProjectsForUserAsync(UserId)).Projects;
        StateHasChanged();
    }

    private async Task LoadCurrentTimeTrackingEntry()
    {
        TimeTrackingEntryDetail = await TimeTrackingService.CurrentTimeTrackingEntryAsync(UserId);
        StateHasChanged();
    }

    private void CreateProject() { }
}