@page "/"
@using Isitar.TimeTracking.Frontend.Common.Authentication
@using Isitar.TimeTracking.Application.TimeTrackingEntry.Queries.TimeTrackingEntryDetail
@using Isitar.TimeTracking.Application.Project.Queries.ProjectList
@using Isitar.TimeTracking.Frontend.Services
@attribute [Authorize]

<section class="page-index">
    <h1 class="title">Welcome Username</h1>
    <div class="columns">
        <div class="column">
            @if (null != TimeTrackingEntryDetail)
            {
                <TimeTrackingEntryCard TimeTrackingEntryDetail="@TimeTrackingEntryDetail"/>
            }
            else
            {
                <p>Currently not working</p>
            }
        </div>
    </div>

    <ul class="columns is-multiline">
        @foreach (var userProject in UserProjects)
        {
            <li class="column is-one-third-desktop is-half-tablet">
                <ProjectCard Project="@userProject"/>
            </li>
        }
        <li class="column is-one-quarter-widescreen is-one-third-desktop is-half-tablet">
            <div class="new-bulk-order-box has-text-centered" @onclick="CreateProject">
                <p>
                    New Project
                </p>
            </div>
        </li>
    </ul>
</section>

@code
{
    public TimeTrackingEntryDetailVm TimeTrackingEntryDetail { get; private set; }

    public IEnumerable<ProjectSlimDto> UserProjects { get; set; } = new ProjectSlimDto[0];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserProjectsAsync();
            await LoadCurrentTimeTrackingEntry();
        }
    }

    [Inject]
    public IProjectService ProjectService { get; set; }

    [Inject]
    public ITimeTrackingService TimeTrackingService { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private async Task LoadUserProjectsAsync()
    {
        var userId = await AuthenticationStateProvider.UserIdAsync();
        UserProjects = (await ProjectService.ProjectsForUserAsync(userId)).Projects;
        StateHasChanged();
    }

    private async Task LoadCurrentTimeTrackingEntry()
    {
        var userId = await AuthenticationStateProvider.UserIdAsync();
        TimeTrackingEntryDetail = await TimeTrackingService.CurrentTimeTrackingEntryAsync(userId);
        StateHasChanged();
    }

    private void CreateProject() { }
}